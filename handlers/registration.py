"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ContentType
from sqlalchemy import select
from sqlalchemy.exc import IntegrityError

from db.models import User
from db.session import async_session
from fsm.registration import Registration
from config.bot_config import ADMIN_ID
from keyboards.reply import main_menu
from i18n.locales import get_text

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
MIN_AGE = 1
MAX_AGE = 120
MIN_NAME_LENGTH = 2

registration_router = Router()


async def get_user_language(user_id: int) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î.

    Args:
        user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        –ö–æ–¥ —è–∑—ã–∫–∞ (ru/en/uz), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'ru'
    """
    async with async_session() as session:
        result = await session.execute(
            select(User).where(User.user_id == user_id)
        )
        user = result.scalar_one_or_none()
        return user.language if user and user.language else "ru"


@registration_router.message(Command("register"))
@registration_router.message(
    F.text.in_(["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "Registration", "Ro'yxatdan o'tish"])
)
async def start_registration(
    message: types.Message,
    state: FSMContext
) -> None:
    """
    –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    lang = await get_user_language(message.from_user.id)

    async with async_session() as session:
        result = await session.execute(
            select(User).where(User.user_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()

    if user and user.name and user.is_active:
        await message.answer(
            get_text(
                "already_registered",
                lang,
                name=user.name,
                phone=user.phone or get_text("not_specified", lang)
            )
        )
        await state.clear()
        return

    await message.answer(get_text("enter_name", lang))
    await state.set_state(Registration.name)


@registration_router.message(
    Registration.name,
    F.text.func(lambda text: len(text) >= MIN_NAME_LENGTH)
)
async def process_name(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∏–º—è.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    lang = await get_user_language(message.from_user.id)
    await state.update_data(name=message.text.strip())
    await message.answer(get_text("enter_age", lang))
    await state.set_state(Registration.age)


@registration_router.message(Registration.age, F.text.regexp(r"^\d{1,3}$"))
async def process_age(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    lang = await get_user_language(message.from_user.id)
    age = int(message.text)

    if not (MIN_AGE <= age <= MAX_AGE):
        await message.answer(get_text("invalid_age", lang))
        return

    await state.update_data(age=age)
    await message.answer(get_text("enter_phone", lang))
    await state.set_state(Registration.phone)


@registration_router.message(
    Registration.phone,
    F.text.regexp(r"^\+?\d{10,15}$")
)
async def process_phone(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    lang = await get_user_language(message.from_user.id)
    phone = message.text.strip()

    async with async_session() as session:
        result = await session.execute(
            select(User).where(User.phone == phone)
        )
        phone_owner = result.scalar_one_or_none()

    if phone_owner:
        await message.answer(get_text("phone_exists", lang))
        await state.clear()
        return

    await state.update_data(phone=phone)
    await message.answer(get_text("send_photo", lang))
    await state.set_state(Registration.photo)


@registration_router.message(Registration.photo, F.photo)
async def process_photo(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    lang = await get_user_language(message.from_user.id)
    await state.update_data(photo=message.photo[-1].file_id)
    await message.answer(get_text("send_document", lang))
    await state.set_state(Registration.document)


@registration_router.message(
    Registration.document,
    F.content_type == ContentType.DOCUMENT
)
async def process_document(
    message: types.Message,
    state: FSMContext
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    lang = await get_user_language(message.from_user.id)
    bot = message.bot
    mime = message.document.mime_type or ""

    if not (mime.startswith("application/pdf") or
            mime.startswith("image/")):
        await message.answer(get_text("invalid_document", lang))
        return

    await state.update_data(document=message.document.file_id)
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º user_id
    async with async_session() as session:
        result = await session.execute(
            select(User).where(User.user_id == message.from_user.id)
        )
        existing_user = result.scalar_one_or_none()

        if existing_user:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing_user.name = data["name"]
            existing_user.age = data["age"]
            existing_user.phone = data["phone"]
            existing_user.photo = data["photo"]
            existing_user.document = data["document"]
            existing_user.is_active = True
            new_user = existing_user
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = User(
                user_id=message.from_user.id,
                name=data["name"],
                age=data["age"],
                phone=data["phone"],
                photo=data["photo"],
                document=data["document"],
                language=lang
            )
            session.add(new_user)

        try:
            await session.commit()
        except IntegrityError:
            await session.rollback()
            await message.answer(get_text("user_exists", lang))
            await state.clear()
            return

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    notify_text = get_text(
        "new_user_notification",
        "ru",
        name=new_user.name,
        phone=new_user.phone,
        user_id=new_user.user_id
    )

    try:
        await bot.send_message(ADMIN_ID, notify_text)
        if new_user.photo:
            await bot.send_photo(
                ADMIN_ID,
                new_user.photo,
                caption="üì∑ –§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )
        if new_user.document:
            await bot.send_document(
                ADMIN_ID,
                new_user.document,
                caption="üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

    await message.answer(
        get_text("registration_complete", lang),
        reply_markup=main_menu(message.from_user.id, lang)
    )
    await state.clear()
