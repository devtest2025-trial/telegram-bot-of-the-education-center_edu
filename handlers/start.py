"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start –∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.
"""
from aiogram import Router, types, F
from aiogram.filters import Command
from sqlalchemy import select

from keyboards.reply import main_menu, language_keyboard
from db.models import User
from db.session import async_session
from i18n.locales import get_text

start_router = Router()


async def get_user_language(user_id: int) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î.
    
    Args:
        user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –ö–æ–¥ —è–∑—ã–∫–∞ (ru/en/uz), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'ru'
    """
    async with async_session() as session:
        result = await session.execute(
            select(User).where(User.user_id == user_id)
        )
        user = result.scalar_one_or_none()
        return user.language if user and user.language else "ru"


@start_router.message(Command("start"))
async def cmd_start(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    lang = await get_user_language(message.from_user.id)
    await message.answer(
        get_text("welcome", lang),
        reply_markup=main_menu(message.from_user.id, lang)
    )


@start_router.message(F.text.in_(["–°—Ç–∞—Ä—Ç", "Start", "Boshlash"]))
async def start_button_handler(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ä—Ç' –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö.
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    lang = await get_user_language(message.from_user.id)
    await message.answer(
        get_text("welcome", lang),
        reply_markup=main_menu(message.from_user.id, lang)
    )


@start_router.message(F.text.in_(["üåê –Ø–∑—ã–∫", "üåê Language", "üåê Til"]))
async def language_menu(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    lang = await get_user_language(message.from_user.id)
    await message.answer(
        get_text("choose_language", lang),
        reply_markup=language_keyboard()
    )


@start_router.callback_query(F.data.startswith("lang:"))
async def set_language(callback: types.CallbackQuery) -> None:
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        callback: Callback query —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
    """
    new_lang = callback.data.split(":")[1]
    
    async with async_session() as session:
        result = await session.execute(
            select(User).where(User.user_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if user:
            user.language = new_lang
            await session.commit()
        else:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è —è–∑—ã–∫–∞
            temp_user = User(
                user_id=callback.from_user.id,
                language=new_lang,
                is_active=False
            )
            session.add(temp_user)
            await session.commit()
    
    await callback.message.edit_text(get_text("language_changed", new_lang))
    await callback.message.answer(
        get_text("welcome", new_lang),
        reply_markup=main_menu(callback.from_user.id, new_lang)
    )
    await callback.answer()
